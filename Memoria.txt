Reflexiones sobre el TAD BST

Al ejecutar el programa p4_e1.c se puede comprobar que los tiempos de creaci√≥n y b√∫squeda
var√≠an mucho seg√∫n si el programa se ejecuta en modo normal o en modo ordenado.
   1. ¬øPor qu√© es as√≠?
   2. ¬øHay alguna propiedad del √°rbol que permita explicar este comportamiento?


1. La raz√≥n por la que funciona mucho m√°s rapido en el caso de usar el modo "sorted" es porque crea
   un arbol equilibrado el cual optimiza cualquier llamada a funciones que recorran el arbol.

2. Esto se debe a la propiedad de la altura del arbol. Esta ultima determina la dificultad 
   para ejecutar funciones como tree_insert o tree_contains. Los ordenes de complejidad son:
    Normal = O(n)
    Sorted = O(log(n))
    // Siendo n el numero de nodos del arbol

---------------------------------------------------------------------------------------------------

Reflexiones sobre el TAD SQ
   1. ¬øQu√© diferencias y similitudes hay entre el TAD SQ y el TAD Cola de la pr√°ctica anterior?
   2. ¬øQu√© coste (aproximado) tiene la operaci√≥n de extraer un elemento en el TAD SQ?
   3. ¬øSer√≠a posible hacer que esta operaci√≥n fuera ùí™(1)?

1. Las principales cosas en las que se parecen son en que ambos son estructuras para almacenar datos
   de cualquier tipo pero la principal diferencia es como se guardan. La cola no se preocupa por el 
   orden, mientras que el arbol binario de busqueda ordena los elementos seg√∫n un criterio definido.

2. El coste aproximado de extraer un elemento es O(log(n)) siendo n el numero de elementos del arbol. 
   Esto es porque log(n) es la altura aproximada del arbol, y la altura es lo que define cuantas 
   operaciones necesarias para la extracci√≥n.

3. No, porque para extraer un elemento hay que encontrarlo y para ello hay que recorrer el arbol, 
   la mejor manera de optimizar las funciones es creando un arbol balanceado para reducir costes.